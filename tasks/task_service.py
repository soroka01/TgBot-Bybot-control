"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import schedule
import time
import pytz
from datetime import datetime
from threading import Thread
from typing import List, Dict, Any

from core.base_service import BaseService
from core.config import config
from core.decorators import handle_errors, log_function_call
from core.factories import bot_factory
from services.alert_service import alert_service
from services.market_service import market_service

class TaskService(BaseService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.bot = bot_factory.get_bot()
        self.alert_service = alert_service
        self.market_service = market_service
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        self._scheduler_thread = None
        self._running = False
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        if self._running:
            self.logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self._running = True
        self._scheduler_thread = Thread(target=self._run_scheduler, daemon=True)
        self._scheduler_thread.start()
        self.logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        self._running = False
        if self._scheduler_thread:
            self._scheduler_thread.join(timeout=5)
        self.logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.logger.info("–¶–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞—á–∞—Ç")
        
        while self._running:
            try:
                schedule.run_pending()
                time.sleep(1)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def setup_tasks(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        schedule.every().minute.do(self.check_all_alerts)
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ 8:30 –ø–æ –ú–æ—Å–∫–≤–µ
        schedule.every().day.at("08:30").do(self.daily_update)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 2:00
        schedule.every().day.at("02:00").do(self.cleanup_old_data)
        
        self.logger.info("–ó–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")
    @log_function_call()
    def check_all_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
            price_alerts = self.alert_service.check_price_alerts()
            for alert_data in price_alerts:
                self._send_price_alert_notification(alert_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º RSI –∞–ª–µ—Ä—Ç—ã
            rsi_alerts = self.alert_service.check_rsi_alerts()
            for alert_data in rsi_alerts:
                self._send_rsi_alert_notification(alert_data)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    @handle_errors("–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    @log_function_call()
    def daily_update(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        moscow_time = datetime.now(self.moscow_tz)
        self.logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ {moscow_time}")
        
        try:
            for user_id in config.TG_IDS:
                self._send_daily_stats(user_id)
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    @handle_errors("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    @log_function_call()
    def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)"""
        self.logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤, –ª–æ–≥–æ–≤ –∏ —Ç.–¥.
    
    @handle_errors("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ")
    def _send_price_alert_notification(self, alert_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ"""
        user_id = alert_data['user_id']
        alert = alert_data['alert']
        current_price = alert_data['current_price']
        
        message = (
            f"üîî –¶–µ–Ω–æ–≤–æ–π –∞–ª–µ—Ä—Ç —Å—Ä–∞–±–æ—Ç–∞–ª!\n\n"
            f"üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: {alert['price']} USDT\n"
            f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:,.2f} USDT\n"
            f"üìà –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è!"
        )
        
        try:
            self.bot.send_message(user_id, message)
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ü–µ–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–µ–Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    @handle_errors("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ RSI")
    def _send_rsi_alert_notification(self, alert_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ RSI"""
        user_id = alert_data['user_id']
        alert = alert_data['alert']
        current_rsi = alert_data['current_rsi']
        
        condition_text = "<" if alert['condition'] == 'below' else ">"
        
        message = (
            f"üìä RSI –∞–ª–µ—Ä—Ç —Å—Ä–∞–±–æ—Ç–∞–ª!\n\n"
            f"üéØ –£—Å–ª–æ–≤–∏–µ: RSI {condition_text} {alert['level']}\n"
            f"üìä –¢–µ–∫—É—â–∏–π RSI: {current_rsi}\n"
            f"‚ö° –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!"
        )
        
        try:
            self.bot.send_message(user_id, message)
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ RSI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ RSI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    @handle_errors("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    def _send_daily_stats(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            rsi = self.market_service.calculate_rsi(str(config.DEFAULT_TIMEFRAME))
            current_price = self.market_service.get_current_price()
            buy_sell_ratio = self.market_service.get_buy_sell_ratio(str(config.DEFAULT_TIMEFRAME))
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            screenshot, min_price_14d = self.market_service.create_price_chart(weeks=5)
            
            if screenshot is None or min_price_14d is None:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 14 –¥–Ω–µ–π
            change_percent = round((current_price - min_price_14d) / min_price_14d * 100, 2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            caption = (
                f"üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ {config.SYMBOL}\n\n"
                f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 14 –¥–Ω–µ–π: {change_percent:+.2f}%\n"
                f"üìä RSI: {rsi}\n"
                f"üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {buy_sell_ratio}\n"
                f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:,.2f} USDT"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            self.bot.send_photo(
                chat_id=user_id,
                photo=screenshot,
                caption=caption
            )
            
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
            try:
                self.bot.send_message(user_id, error_message)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
task_service = TaskService()
