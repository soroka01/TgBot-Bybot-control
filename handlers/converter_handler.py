"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç
"""
from telebot import types
from handlers.base_handler import BaseHandler
from services.converter_service import converter_service
from buttons import create_back_button
from core.decorators import handle_errors

class ConverterHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç"""
    
    def __init__(self):
        super().__init__()
        self.converter_service = converter_service
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "converter")
        @handle_errors("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞")
        def handle_converter_menu(call):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            markup = self._create_converter_menu()
            
            self.edit_message_safely(
                user_id,
                message_id,
                "üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç:",
                markup
            )
        
        @self.bot.callback_query_handler(func=lambda call: call.data in [
            "convert_usd_to_btc", "convert_btc_to_usd"
        ])
        @handle_errors("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        def handle_conversion_start(call):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            if call.data == "convert_usd_to_btc":
                self._start_usd_to_btc_conversion(user_id, message_id)
            elif call.data == "convert_btc_to_usd":
                self._start_btc_to_usd_conversion(user_id, message_id)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "back_to_converter")
        @handle_errors("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä")
        def handle_back_to_converter(call):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            markup = self._create_converter_menu()
            
            self.edit_message_safely(
                user_id,
                message_id,
                "üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç:",
                markup
            )
    
    def _create_converter_menu(self):
        """–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞"""
        markup = types.InlineKeyboardMarkup()
        
        markup.add(
            types.InlineKeyboardButton(
                "üíµ USD ‚Üí ‚Çø BTC", 
                callback_data="convert_usd_to_btc"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "‚Çø BTC ‚Üí üíµ USD", 
                callback_data="convert_btc_to_usd"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥", 
                callback_data="back_to_menu"
            )
        )
        
        return markup
    
    def _start_usd_to_btc_conversion(self, user_id: int, message_id: int):
        """–ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é USD –≤ BTC"""
        message_text = (
            "üíµ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USD –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ BTC:\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã: 100, 500, 1000"
        )
        
        self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("converter")
        )
        
        self.bot.register_next_step_handler_by_chat_id(
            user_id,
            lambda msg: self._process_conversion(msg, "USD", "BTC")
        )
    
    def _start_btc_to_usd_conversion(self, user_id: int, message_id: int):
        """–ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é BTC –≤ USD"""
        message_text = (
            "‚Çø –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ USD:\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã: 0.001, 0.01, 0.1"
        )
        
        self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("converter")
        )
        
        self.bot.register_next_step_handler_by_chat_id(
            user_id,
            lambda msg: self._process_conversion(msg, "BTC", "USD")
        )
    
    @handle_errors("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    def _process_conversion(self, message, from_currency: str, to_currency: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"""
        user_id = self.get_user_id(message)
        
        try:
            amount = float(message.text.strip())
            
            if amount <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            result = self.converter_service.convert(amount, from_currency, to_currency)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_result = self.converter_service.format_conversion_result(
                amount, from_currency, to_currency, result
            )
            
            self.send_message_safely(
                user_id,
                formatted_result,
                create_back_button("converter")
            )
            
        except ValueError as e:
            if "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º" in str(e):
                error_message = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
            else:
                error_message = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
                
            self.send_message_safely(
                user_id,
                error_message,
                create_back_button("converter")
            )
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}"
            self.send_message_safely(
                user_id,
                error_message,
                create_back_button("converter")
            )
