"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.base_handler import BaseHandler
from services.converter_service import converter_service
from buttons import create_back_button
from core.decorators import handle_errors
from core.factories import bot_factory

class ConverterStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    waiting_for_usd_amount = State()
    waiting_for_btc_amount = State()

class ConverterHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç"""
    
    def __init__(self):
        super().__init__()
        self.converter_service = converter_service
        self.router = Router()
        self.dp = bot_factory.get_dispatcher()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.router.callback_query(F.data == "converter")
        @handle_errors("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞")
        async def handle_converter_menu(call: CallbackQuery):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            markup = self._create_converter_menu()
            
            await self.edit_message_safely(
                user_id,
                message_id,
                "üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç:",
                markup
            )
            await call.answer()
        
        @self.router.callback_query(F.data.in_([
            "convert_usd_to_btc", "convert_btc_to_usd"
        ]))
        @handle_errors("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        async def handle_conversion_start(call: CallbackQuery, state: FSMContext):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            if call.data == "convert_usd_to_btc":
                await self._start_usd_to_btc_conversion(user_id, message_id, state)
            elif call.data == "convert_btc_to_usd":
                await self._start_btc_to_usd_conversion(user_id, message_id, state)
                
            await call.answer()
        
        @self.router.callback_query(F.data == "back_to_converter")
        @handle_errors("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä")
        async def handle_back_to_converter(call: CallbackQuery, state: FSMContext):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            markup = self._create_converter_menu()
            
            await self.edit_message_safely(
                user_id,
                message_id,
                "üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç:",
                markup
            )
            await call.answer()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        @self.router.message(ConverterStates.waiting_for_usd_amount)
        @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USD –≤ BTC")
        async def process_usd_to_btc_input(message: Message, state: FSMContext):
            await self._process_usd_to_btc_input(message, state)
            
        @self.router.message(ConverterStates.waiting_for_btc_amount)
        @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ BTC –≤ USD")
        async def process_btc_to_usd_input(message: Message, state: FSMContext):
            await self._process_btc_to_usd_input(message, state)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
        self.dp.include_router(self.router)
    
    def _create_converter_menu(self):
        """–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞"""
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ USD ‚û°Ô∏è BTC", callback_data="convert_usd_to_btc")],
            [InlineKeyboardButton(text="‚Çø BTC ‚û°Ô∏è USD", callback_data="convert_btc_to_usd")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        return markup
    
    async def _start_usd_to_btc_conversion(self, user_id: int, message_id: int, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é USD –≤ BTC"""
        current_price = self.converter_service.get_current_btc_price()
        
        message_text = (
            f"üíµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USD –≤ BTC\n\n"
            f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: {current_price:,.2f} USD\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USD –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"
        )
        
        await self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("converter")
        )
        
        await state.set_state(ConverterStates.waiting_for_usd_amount)
    
    async def _start_btc_to_usd_conversion(self, user_id: int, message_id: int, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é BTC –≤ USD"""
        current_price = self.converter_service.get_current_btc_price()
        
        message_text = (
            f"‚Çø –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è BTC –≤ USD\n\n"
            f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: {current_price:,.2f} USD\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"
        )
        
        await self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("converter")
        )
        
        await state.set_state(ConverterStates.waiting_for_btc_amount)
    
    async def _process_usd_to_btc_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Å—É–º–º—ã USD –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ BTC"""
        user_id = self.get_user_id(message)
        amount_text = message.text.strip()
        
        try:
            usd_amount = float(amount_text)
            
            if usd_amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            result = self.converter_service.convert_usd_to_btc(usd_amount)
            
            result_message = (
                f"üí± –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n\n"
                f"üíµ {usd_amount:,.2f} USD\n"
                f"‚¨áÔ∏è\n"
                f"‚Çø {result['btc_amount']:.8f} BTC\n\n"
                f"üí≤ –ö—É—Ä—Å: {result['rate']:,.2f} USD/BTC\n"
                f"‚è∞ –í—Ä–µ–º—è: {result['timestamp']}"
            )
            
            await self.send_message_safely(
                user_id,
                result_message,
                create_back_button("converter")
            )
            
        except ValueError:
            error_message = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
            await self.send_message_safely(
                user_id,
                error_message,
                create_back_button("converter")
            )
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}"
            await self.send_message_safely(
                user_id,
                error_message,
                create_back_button("converter")
            )
        finally:
            await state.clear()
    
    async def _process_btc_to_usd_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ BTC –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ USD"""
        user_id = self.get_user_id(message)
        amount_text = message.text.strip()
        
        try:
            btc_amount = float(amount_text)
            
            if btc_amount <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            result = self.converter_service.convert_btc_to_usd(btc_amount)
            
            result_message = (
                f"üí± –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n\n"
                f"‚Çø {btc_amount:.8f} BTC\n"
                f"‚¨áÔ∏è\n"
                f"üíµ {result['usd_amount']:,.2f} USD\n\n"
                f"üí≤ –ö—É—Ä—Å: {result['rate']:,.2f} USD/BTC\n"
                f"‚è∞ –í—Ä–µ–º—è: {result['timestamp']}"
            )
            
            await self.send_message_safely(
                user_id,
                result_message,
                create_back_button("converter")
            )
            
        except ValueError:
            error_message = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
            await self.send_message_safely(
                user_id,
                error_message,
                create_back_button("converter")
            )
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}"
            await self.send_message_safely(
                user_id,
                error_message,
                create_back_button("converter")
            )
        finally:
            await state.clear()
