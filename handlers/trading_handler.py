"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""
from handlers.base_handler import BaseHandler
from services.trading_service import trading_service
from services.market_service import market_service
from buttons import create_babit_menu, create_back_button
from core.decorators import handle_errors

class TradingHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        super().__init__()
        self.trading_service = trading_service
        self.market_service = market_service
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "babit")
        @handle_errors("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –º–µ–Ω—é")
        def handle_babit_menu(call):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            self.edit_message_safely(
                user_id,
                message_id,
                "üõ†Ô∏è –¢–æ—Ä–≥–æ–≤–æ–µ –º–µ–Ω—é:",
                create_babit_menu()
            )
        
        @self.bot.callback_query_handler(func=lambda call: call.data in [
            "balance", "history", "trade", "current_price"
        ])
        @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        def handle_trading_actions(call):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            if call.data == "balance":
                self._show_balance(user_id, message_id)
            elif call.data == "history":
                self._show_history(user_id, message_id)
            elif call.data == "trade":
                self._start_trade(user_id, message_id)
            elif call.data == "current_price":
                self._show_current_price(user_id, message_id)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "back_to_babit")
        @handle_errors("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–µ –º–µ–Ω—é")
        def handle_back_to_babit(call):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            self.edit_message_safely(
                user_id,
                message_id,
                "üõ†Ô∏è –¢–æ—Ä–≥–æ–≤–æ–µ –º–µ–Ω—é:",
                create_babit_menu()
            )
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
    def _show_balance(self, user_id: int, message_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""
        try:
            btc_balance, usdt_balance = self.trading_service.get_balance()
            
            balance_message = (
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n\n"
                f"‚Çø BTC: {btc_balance}\n"
                f"üíµ USDT: {usdt_balance}"
            )
            
            self.edit_message_safely(
                user_id,
                message_id,
                balance_message,
                create_back_button("babit")
            )
            
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}"
            self.edit_message_safely(
                user_id,
                message_id,
                error_message,
                create_back_button("babit")
            )
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")
    def _show_history(self, user_id: int, message_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤"""
        try:
            history_data = self.trading_service.get_trade_history()
            formatted_history = self.trading_service.format_trade_history(history_data)
            
            history_message = f"üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n{formatted_history}"
            
            self.edit_message_safely(
                user_id,
                message_id,
                history_message,
                create_back_button("babit")
            )
            
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
            self.edit_message_safely(
                user_id,
                message_id,
                error_message,
                create_back_button("babit")
            )
    
    @handle_errors("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")
    def _start_trade(self, user_id: int, message_id: int):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        trade_message = (
            "üíµ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC:\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã: 10, 50, 100"
        )
        
        self.edit_message_safely(
            user_id,
            message_id,
            trade_message,
            create_back_button("babit")
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.bot.register_next_step_handler_by_chat_id(
            user_id, 
            self._process_trade_input
        )
    
    @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
    def _process_trade_input(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        user_id = self.get_user_id(message)
        amount_text = message.text.strip()
        
        try:
            amount_usdt = float(amount_text)
            
            if amount_usdt <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            order_result = self.trading_service.place_market_buy_order(amount_usdt)
            
            success_message = (
                f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!\n\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {amount_usdt} USDT\n"
                f"‚Çø –ü–æ–ª—É—á–µ–Ω–æ: {order_result.get('qty', 'N/A')} BTC\n"
                f"üìã ID –æ—Ä–¥–µ—Ä–∞: {order_result.get('orderId', 'N/A')}"
            )
            
            self.send_message_safely(
                user_id,
                success_message,
                create_back_button("babit")
            )
            
        except ValueError as e:
            error_message = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
            self.send_message_safely(
                user_id,
                error_message,
                create_back_button("babit")
            )
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {str(e)}"
            self.send_message_safely(
                user_id,
                error_message,
                create_back_button("babit")
            )
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã")
    def _show_current_price(self, user_id: int, message_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        try:
            current_price = self.market_service.get_current_price()
            daily_change = self.market_service.get_daily_change_percent()
            
            price_message = (
                f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC:\n\n"
                f"üìà {current_price:,.2f} USDT\n"
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {daily_change}"
            )
            
            self.edit_message_safely(
                user_id,
                message_id,
                price_message,
                create_back_button("babit")
            )
            
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {str(e)}"
            self.edit_message_safely(
                user_id,
                message_id,
                error_message,
                create_back_button("babit")
            )
