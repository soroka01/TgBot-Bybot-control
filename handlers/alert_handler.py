"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.base_handler import BaseHandler
from services.alert_service import alert_service
from buttons import create_notifications_menu, create_back_button
from core.decorators import handle_errors
from core.factories import bot_factory

class AlertStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
    waiting_for_price = State()
    waiting_for_rsi = State()

class AlertHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.alert_service = alert_service
        self.router = Router()
        self.dp = bot_factory.get_dispatcher()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.router.callback_query(F.data == "notifications")
        @handle_errors("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        async def handle_notifications_menu(call: CallbackQuery):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            await self.edit_message_safely(
                user_id,
                message_id,
                "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:",
                create_notifications_menu()
            )
            await call.answer()
        
        @self.router.callback_query(F.data.in_([
            "set_price_alert", "list_price_alerts", "set_rsi_alert", "list_rsi_alerts",
            "delete_price_alert", "delete_rsi_alert", "delete_all_price_alerts", 
            "delete_all_rsi_alerts", "delete_all_alerts"
        ]))
        @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–ª–µ—Ä—Ç–∞–º–∏")
        async def handle_alert_actions(call: CallbackQuery, state: FSMContext):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            if call.data == "set_price_alert":
                await self._start_price_alert_setup(user_id, message_id, state)
            elif call.data == "list_price_alerts":
                await self._list_price_alerts(user_id, message_id)
            elif call.data == "set_rsi_alert":
                await self._start_rsi_alert_setup(user_id, message_id, state)
            elif call.data == "list_rsi_alerts":
                await self._list_rsi_alerts(user_id, message_id)
            elif call.data == "delete_price_alert":
                await self._start_delete_price_alert(user_id, message_id)
            elif call.data == "delete_rsi_alert":
                await self._start_delete_rsi_alert(user_id, message_id)
            elif call.data == "delete_all_price_alerts":
                await self._delete_all_price_alerts(user_id, message_id)
            elif call.data == "delete_all_rsi_alerts":
                await self._delete_all_rsi_alerts(user_id, message_id)
            elif call.data == "delete_all_alerts":
                await self._delete_all_alerts(user_id, message_id)
                
            await call.answer()
        
        @self.router.callback_query(F.data == "back_to_notifications")
        @handle_errors("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        async def handle_back_to_notifications(call: CallbackQuery, state: FSMContext):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            await self.edit_message_safely(
                user_id,
                message_id,
                "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:",
                create_notifications_menu()
            )
            await call.answer()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        @self.router.callback_query(F.data.startswith("alert_"))
        @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–∞")
        async def handle_alert_setup_callbacks(call: CallbackQuery):
            await self._handle_alert_type_selection(call)
            
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        @self.router.message(AlertStates.waiting_for_price)
        @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞")
        async def process_price_alert_input(message: Message, state: FSMContext):
            await self._process_price_alert_input(message, state)
            
        @self.router.message(AlertStates.waiting_for_rsi)
        @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RSI –∞–ª–µ—Ä—Ç–∞")
        async def process_rsi_alert_input(message: Message, state: FSMContext):
            await self._process_rsi_alert_input(message, state)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
        self.dp.include_router(self.router)
    
    async def _start_price_alert_setup(self, user_id: int, message_id: int, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        message_text = (
            "üí≤ –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã: 50000, 75000, 100000"
        )
        
        await self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("notifications")
        )
        
        await state.set_state(AlertStates.waiting_for_price)
    
    async def _start_rsi_alert_setup(self, user_id: int, message_id: int, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É RSI –∞–ª–µ—Ä—Ç–∞"""
        message_text = (
            "üìä –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å RSI –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã: 30, 70, 80"
        )
        
        await self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("notifications")
        )
        
        await state.set_state(AlertStates.waiting_for_rsi)
    
    async def _process_price_alert_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        user_id = self.get_user_id(message)
        price_text = message.text.strip()
        
        try:
            price_level = float(price_text)
            
            if price_level <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∞–ª–µ—Ä—Ç–æ–≤
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîî –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π", callback_data=f"alert_once_{price_level}")],
                [InlineKeyboardButton(text="üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π", callback_data=f"alert_permanent_{price_level}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_notifications")]
            ])
            
            alert_message = (
                f"üí∞ –£—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã: {price_level:,.2f} USDT\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
            )
            
            await self.send_message_safely(
                user_id,
                alert_message,
                markup
            )
            
        except ValueError:
            error_message = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
            await self.send_message_safely(
                user_id,
                error_message,
                create_back_button("notifications")
            )
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
            await self.send_message_safely(
                user_id,
                error_message,
                create_back_button("notifications")
            )
        finally:
            await state.clear()
    
    async def _process_rsi_alert_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ RSI –∞–ª–µ—Ä—Ç–∞"""
        user_id = self.get_user_id(message)
        rsi_text = message.text.strip()
        
        try:
            rsi_level = float(rsi_text)
            
            if not (0 <= rsi_level <= 100):
                raise ValueError("RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª–æ–≤–∏—è–º–∏
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìà –ë–æ–ª—å—à–µ", callback_data=f"rsi_alert_above_{rsi_level}")],
                [InlineKeyboardButton(text="üìâ –ú–µ–Ω—å—à–µ", callback_data=f"rsi_alert_below_{rsi_level}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_notifications")]
            ])
            
            alert_message = (
                f"üìä –£—Ä–æ–≤–µ–Ω—å RSI: {rsi_level}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:"
            )
            
            await self.send_message_safely(
                user_id,
                alert_message,
                markup
            )
            
        except ValueError as e:
            error_message = f"‚ö†Ô∏è {str(e)}"
            await self.send_message_safely(
                user_id,
                error_message,
                create_back_button("notifications")
            )
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
            await self.send_message_safely(
                user_id,
                error_message,
                create_back_button("notifications")
            )
        finally:
            await state.clear()
    
    async def _handle_alert_type_selection(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞"""
        user_id = self.get_user_id(call)
        
        try:
            if call.data.startswith("alert_once_"):
                price_level = float(call.data.split("_")[2])
                success = self.alert_service.add_price_alert(user_id, price_level, permanent=False)
                
                if success:
                    message = f"‚úÖ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∞–ª–µ—Ä—Ç –Ω–∞ —Ü–µ–Ω—É {price_level:,.2f} USDT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
                else:
                    message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–ª–µ—Ä—Ç–æ–≤."
                    
            elif call.data.startswith("alert_permanent_"):
                price_level = float(call.data.split("_")[2])
                success = self.alert_service.add_price_alert(user_id, price_level, permanent=True)
                
                if success:
                    message = f"‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç –Ω–∞ —Ü–µ–Ω—É {price_level:,.2f} USDT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
                else:
                    message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–ª–µ—Ä—Ç–æ–≤."
                    
            elif call.data.startswith("rsi_alert_above_"):
                rsi_level = float(call.data.split("_")[3])
                success = self.alert_service.add_rsi_alert(user_id, rsi_level, condition="above")
                
                if success:
                    message = f"‚úÖ RSI –∞–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∫–æ–≥–¥–∞ RSI > {rsi_level}"
                else:
                    message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å RSI –∞–ª–µ—Ä—Ç."
                    
            elif call.data.startswith("rsi_alert_below_"):
                rsi_level = float(call.data.split("_")[3])
                success = self.alert_service.add_rsi_alert(user_id, rsi_level, condition="below")
                
                if success:
                    message = f"‚úÖ RSI –∞–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∫–æ–≥–¥–∞ RSI < {rsi_level}"
                else:
                    message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å RSI –∞–ª–µ—Ä—Ç."
            else:
                message = "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞"
            
            await self.bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=message,
                reply_markup=create_back_button("notifications")
            )
            
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
            await self.bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=error_message,
                reply_markup=create_back_button("notifications")
            )
            
        await call.answer()
    
    async def _list_price_alerts(self, user_id: int, message_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            alerts = self.alert_service.get_price_alerts(user_id)
            
            if not alerts:
                message = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"
            else:
                alert_list = []
                for i, alert in enumerate(alerts, 1):
                    alert_type = "üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π" if alert.get('permanent', False) else "üîî –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π"
                    alert_list.append(f"{i}. {alert['price']:,.2f} USDT ({alert_type})")
                
                message = f"üí∞ –í–∞—à–∏ —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:\n\n" + "\n".join(alert_list)
            
            await self.edit_message_safely(
                user_id,
                message_id,
                message,
                create_back_button("notifications")
            )
            
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤: {str(e)}"
            await self.edit_message_safely(
                user_id,
                message_id,
                error_message,
                create_back_button("notifications")
            )
    
    async def _list_rsi_alerts(self, user_id: int, message_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ RSI –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            alerts = self.alert_service.get_rsi_alerts(user_id)
            
            if not alerts:
                message = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö RSI –∞–ª–µ—Ä—Ç–æ–≤"
            else:
                alert_list = []
                for i, alert in enumerate(alerts, 1):
                    condition = "üìà –±–æ–ª—å—à–µ" if alert.get('condition') == 'above' else "üìâ –º–µ–Ω—å—à–µ"
                    alert_list.append(f"{i}. RSI {condition} {alert['level']}")
                
                message = f"üìä –í–∞—à–∏ RSI –∞–ª–µ—Ä—Ç—ã:\n\n" + "\n".join(alert_list)
            
            await self.edit_message_safely(
                user_id,
                message_id,
                message,
                create_back_button("notifications")
            )
            
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSI –∞–ª–µ—Ä—Ç–æ–≤: {str(e)}"
            await self.edit_message_safely(
                user_id,
                message_id,
                error_message,
                create_back_button("notifications")
            )
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    async def _start_delete_price_alert(self, user_id: int, message_id: int):
        """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        message = "üóëÔ∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ"
        await self.edit_message_safely(user_id, message_id, message, create_back_button("notifications"))
    
    async def _start_delete_rsi_alert(self, user_id: int, message_id: int):
        """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ RSI –∞–ª–µ—Ä—Ç–∞"""
        message = "üóëÔ∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö RSI –∞–ª–µ—Ä—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ"
        await self.edit_message_safely(user_id, message_id, message, create_back_button("notifications"))
    
    async def _delete_all_price_alerts(self, user_id: int, message_id: int):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        try:
            count = self.alert_service.delete_all_price_alerts(user_id)
            message = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"
        except Exception as e:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤: {str(e)}"
        
        await self.edit_message_safely(user_id, message_id, message, create_back_button("notifications"))
    
    async def _delete_all_rsi_alerts(self, user_id: int, message_id: int):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ RSI –∞–ª–µ—Ä—Ç—ã"""
        try:
            count = self.alert_service.delete_all_rsi_alerts(user_id)
            message = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} RSI –∞–ª–µ—Ä—Ç–æ–≤"
        except Exception as e:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ RSI –∞–ª–µ—Ä—Ç–æ–≤: {str(e)}"
        
        await self.edit_message_safely(user_id, message_id, message, create_back_button("notifications"))
    
    async def _delete_all_alerts(self, user_id: int, message_id: int):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã"""
        try:
            price_count = self.alert_service.delete_all_price_alerts(user_id)
            rsi_count = self.alert_service.delete_all_rsi_alerts(user_id)
            total_count = price_count + rsi_count
            message = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {total_count} –∞–ª–µ—Ä—Ç–æ–≤ (—Ü–µ–Ω–æ–≤—ã—Ö: {price_count}, RSI: {rsi_count})"
        except Exception as e:
            message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤: {str(e)}"
        
        await self.edit_message_safely(user_id, message_id, message, create_back_button("notifications"))
