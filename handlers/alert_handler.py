"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤
"""
from telebot import types
from handlers.base_handler import BaseHandler
from services.alert_service import alert_service
from buttons import create_notifications_menu, create_back_button
from core.decorators import handle_errors

class AlertHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.alert_service = alert_service
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "notifications")
        @handle_errors("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        def handle_notifications_menu(call):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            self.edit_message_safely(
                user_id,
                message_id,
                "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:",
                create_notifications_menu()
            )
        
        @self.bot.callback_query_handler(func=lambda call: call.data in [
            "set_price_alert", "list_price_alerts", "set_rsi_alert", "list_rsi_alerts",
            "delete_price_alert", "delete_rsi_alert", "delete_all_price_alerts", 
            "delete_all_rsi_alerts", "delete_all_alerts"
        ])
        @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–ª–µ—Ä—Ç–∞–º–∏")
        def handle_alert_actions(call):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            if call.data == "set_price_alert":
                self._start_price_alert_setup(user_id, message_id)
            elif call.data == "list_price_alerts":
                self._list_price_alerts(user_id, message_id)
            elif call.data == "set_rsi_alert":
                self._start_rsi_alert_setup(user_id, message_id)
            elif call.data == "list_rsi_alerts":
                self._list_rsi_alerts(user_id, message_id)
            elif call.data == "delete_price_alert":
                self._start_delete_price_alert(user_id, message_id)
            elif call.data == "delete_rsi_alert":
                self._start_delete_rsi_alert(user_id, message_id)
            elif call.data == "delete_all_price_alerts":
                self._delete_all_price_alerts(user_id, message_id)
            elif call.data == "delete_all_rsi_alerts":
                self._delete_all_rsi_alerts(user_id, message_id)
            elif call.data == "delete_all_alerts":
                self._delete_all_alerts(user_id, message_id)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "back_to_notifications")
        @handle_errors("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        def handle_back_to_notifications(call):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            self.edit_message_safely(
                user_id,
                message_id,
                "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:",
                create_notifications_menu()
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("alert_"))
        @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–∞")
        def handle_alert_setup_callbacks(call):
            self._handle_alert_type_selection(call)
    
    def _start_price_alert_setup(self, user_id: int, message_id: int):
        """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        message_text = (
            "üí≤ –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ü–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã: 50000, 75000, 100000"
        )
        
        self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("notifications")
        )
        
        self.bot.register_next_step_handler_by_chat_id(
            user_id,
            lambda msg: self._process_price_alert_input(msg, "price")
        )
    
    def _start_rsi_alert_setup(self, user_id: int, message_id: int):
        """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É RSI –∞–ª–µ—Ä—Ç–∞"""
        message_text = (
            "üìä –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å RSI –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã: 30, 70 (–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 100)"
        )
        
        self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("notifications")
        )
        
        self.bot.register_next_step_handler_by_chat_id(
            user_id,
            lambda msg: self._process_rsi_alert_input(msg)
        )
    
    @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞")
    def _process_price_alert_input(self, message, alert_type):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        user_id = self.get_user_id(message)
        
        try:
            price_level = float(message.text.strip())
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(
                    "–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ", 
                    callback_data=f"alert_once_{alert_type}_{price_level}"
                )
            )
            markup.add(
                types.InlineKeyboardButton(
                    "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ", 
                    callback_data=f"alert_permanent_{alert_type}_{price_level}"
                )
            )
            markup.add(
                types.InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥", 
                    callback_data="back_to_notifications"
                )
            )
            
            self.send_message_safely(
                user_id,
                f"üí≤ –¶–µ–Ω–∞: {price_level} USDT\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                markup
            )
            
        except ValueError:
            self.send_message_safely(
                user_id,
                "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
                create_back_button("notifications")
            )
    
    @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ RSI –∞–ª–µ—Ä—Ç–∞")
    def _process_rsi_alert_input(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ RSI –∞–ª–µ—Ä—Ç–∞"""
        user_id = self.get_user_id(message)
        
        try:
            rsi_level = float(message.text.strip())
            
            if not (0 <= rsi_level <= 100):
                raise ValueError("RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏—è
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(
                    f"RSI < {rsi_level}", 
                    callback_data=f"alert_rsi_below_{rsi_level}"
                )
            )
            markup.add(
                types.InlineKeyboardButton(
                    f"RSI > {rsi_level}", 
                    callback_data=f"alert_rsi_above_{rsi_level}"
                )
            )
            markup.add(
                types.InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥", 
                    callback_data="back_to_notifications"
                )
            )
            
            self.send_message_safely(
                user_id,
                f"üìä RSI: {rsi_level}\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ:",
                markup
            )
            
        except ValueError as e:
            self.send_message_safely(
                user_id,
                f"‚ö†Ô∏è {str(e)}",
                create_back_button("notifications")
            )
    
    @handle_errors("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–∞")
    def _handle_alert_type_selection(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞"""
        user_id = self.get_user_id(call)
        parts = call.data.split("_")
        
        try:
            if len(parts) >= 4 and parts[1] == "once":
                # alert_once_price_50000
                alert_type = parts[2]  # price
                value = float(parts[3])
                permanent = False
                
                if alert_type == "price":
                    success = self.alert_service.add_price_alert(user_id, value, permanent)
                    if success:
                        message = f"‚úÖ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É {value} USDT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                    else:
                        message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                
            elif len(parts) >= 4 and parts[1] == "permanent":
                # alert_permanent_price_50000
                alert_type = parts[2]  # price
                value = float(parts[3])
                permanent = True
                
                if alert_type == "price":
                    success = self.alert_service.add_price_alert(user_id, value, permanent)
                    if success:
                        message = f"‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É {value} USDT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                    else:
                        message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                        
            elif len(parts) >= 4 and parts[1] == "rsi":
                # alert_rsi_below_30 –∏–ª–∏ alert_rsi_above_70
                condition = parts[2]  # below/above
                value = float(parts[3])
                
                success = self.alert_service.add_rsi_alert(user_id, value, condition, permanent=False)
                condition_text = "<" if condition == "below" else ">"
                if success:
                    message = f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ RSI {condition_text} {value} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                else:
                    message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            else:
                message = "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            self.bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=message,
                reply_markup=create_back_button("notifications")
            )
            
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
            self.bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=error_message,
                reply_markup=create_back_button("notifications")
            )
    
    def _list_price_alerts(self, user_id: int, message_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = self.alert_service.get_price_alerts(user_id)
        formatted_alerts = self.alert_service.format_price_alerts(alerts)
        
        self.edit_message_safely(
            user_id,
            message_id,
            formatted_alerts,
            create_back_button("notifications")
        )
    
    def _list_rsi_alerts(self, user_id: int, message_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ RSI –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = self.alert_service.get_rsi_alerts(user_id)
        formatted_alerts = self.alert_service.format_rsi_alerts(alerts)
        
        self.edit_message_safely(
            user_id,
            message_id,
            formatted_alerts,
            create_back_button("notifications")
        )
    
    def _start_delete_price_alert(self, user_id: int, message_id: int):
        """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        alerts = self.alert_service.get_price_alerts(user_id)
        
        if not alerts:
            self.edit_message_safely(
                user_id,
                message_id,
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤",
                create_back_button("notifications")
            )
            return
        
        formatted_alerts = self.alert_service.format_price_alerts(alerts)
        message_text = f"{formatted_alerts}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        
        self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("notifications")
        )
        
        self.bot.register_next_step_handler_by_chat_id(
            user_id,
            lambda msg: self._process_delete_alert(msg, "price_alerts")
        )
    
    def _start_delete_rsi_alert(self, user_id: int, message_id: int):
        """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ RSI –∞–ª–µ—Ä—Ç–∞"""
        alerts = self.alert_service.get_rsi_alerts(user_id)
        
        if not alerts:
            self.edit_message_safely(
                user_id,
                message_id,
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö RSI –∞–ª–µ—Ä—Ç–æ–≤",
                create_back_button("notifications")
            )
            return
        
        formatted_alerts = self.alert_service.format_rsi_alerts(alerts)
        message_text = f"{formatted_alerts}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        
        self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("notifications")
        )
        
        self.bot.register_next_step_handler_by_chat_id(
            user_id,
            lambda msg: self._process_delete_alert(msg, "rsi_alerts")
        )
    
    @handle_errors("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞")
    def _process_delete_alert(self, message, alert_type):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
        user_id = self.get_user_id(message)
        
        try:
            alert_index = int(message.text.strip()) - 1
            success = self.alert_service.remove_alert(user_id, alert_index, alert_type)
            
            if success:
                message_text = "‚úÖ –ê–ª–µ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            else:
                message_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞"
                
        except ValueError:
            message_text = "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∞–ª–µ—Ä—Ç–∞"
        except Exception as e:
            message_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
        
        self.send_message_safely(
            user_id,
            message_text,
            create_back_button("notifications")
        )
    
    def _delete_all_price_alerts(self, user_id: int, message_id: int):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        success = self.alert_service.clear_alerts(user_id, "price_alerts")
        
        if success:
            message = "‚úÖ –í—Å–µ —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã"
        else:
            message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"
        
        self.edit_message_safely(
            user_id,
            message_id,
            message,
            create_back_button("notifications")
        )
    
    def _delete_all_rsi_alerts(self, user_id: int, message_id: int):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ RSI –∞–ª–µ—Ä—Ç—ã"""
        success = self.alert_service.clear_alerts(user_id, "rsi_alerts")
        
        if success:
            message = "‚úÖ –í—Å–µ RSI –∞–ª–µ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã"
        else:
            message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"
        
        self.edit_message_safely(
            user_id,
            message_id,
            message,
            create_back_button("notifications")
        )
    
    def _delete_all_alerts(self, user_id: int, message_id: int):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã"""
        success = self.alert_service.clear_alerts(user_id)
        
        if success:
            message = "‚úÖ –í—Å–µ –∞–ª–µ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã"
        else:
            message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"
        
        self.edit_message_safely(
            user_id,
            message_id,
            message,
            create_back_button("notifications")
        )
