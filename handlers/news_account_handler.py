"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.base_handler import BaseHandler
from services.news_service import news_service
from services.database_service import db_service
from buttons import create_back_button, create_account_menu
from core.decorators import handle_errors
from core.factories import bot_factory

class AccountStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
    waiting_for_name = State()

class NewsAndAccountHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    
    def __init__(self):
        super().__init__()
        self.news_service = news_service
        self.db_service = db_service
        self.router = Router()
        self.dp = bot_factory.get_dispatcher()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.router.callback_query(F.data == "news")
        @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")
        async def handle_news(call: CallbackQuery):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            await self._send_news(user_id, message_id)
            await call.answer()
        
        @self.router.callback_query(F.data == "account")
        @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
        async def handle_account(call: CallbackQuery):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            await self._send_account_info(user_id, message_id)
            await call.answer()
        
        @self.router.callback_query(F.data == "back_to_account")
        @handle_errors("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç")
        async def handle_back_to_account(call: CallbackQuery, state: FSMContext):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            await self._send_account_info(user_id, message_id)
            await call.answer()
        
        @self.router.callback_query(F.data == "change_name")
        @handle_errors("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏")
        async def handle_change_name(call: CallbackQuery, state: FSMContext):
            user_id = self.get_user_id(call)
            message_id = self.get_message_id(call)
            
            await self._start_name_change(user_id, message_id, state)
            await call.answer()
        
        @self.router.message(AccountStates.waiting_for_name)
        @handle_errors("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏")
        async def process_name_change(message: Message, state: FSMContext):
            await self._process_name_change(message, state)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
        self.dp.include_router(self.router)
    
    @handle_errors("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
    async def _send_news(self, user_id: int, message_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            news_data = self.news_service.get_latest_crypto_news()
            
            if news_data:
                news_message = f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö:\n\n{news_data}"
            else:
                news_message = "üì≠ –ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            
            await self.edit_message_safely(
                user_id,
                message_id,
                news_message,
                create_back_button("menu")
            )
            
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"
            await self.edit_message_safely(
                user_id,
                message_id,
                error_message,
                create_back_button("menu")
            )
    
    @handle_errors("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
    async def _send_account_info(self, user_id: int, message_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db_service.get_user_data(user_id)
            user_name = user_data.get("name", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤
            alert_stats = self.db_service.get_user_alert_stats(user_id)
            
            account_message = (
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n\n"
                f"üÜî ID: {user_id}\n"
                f"üë®‚Äçüíº –ò–º—è: {user_name}\n"
                f"üîî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {alert_stats.get('total', 0)}\n"
                f"  ‚Ä¢ –¶–µ–Ω–æ–≤—ã—Ö: {alert_stats.get('price_alerts', 0)}\n"
                f"  ‚Ä¢ RSI: {alert_stats.get('rsi_alerts', 0)}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )
            
            await self.edit_message_safely(
                user_id,
                message_id,
                account_message,
                create_account_menu()
            )
            
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {str(e)}"
            await self.edit_message_safely(
                user_id,
                message_id,
                error_message,
                create_back_button("menu")
            )
    
    async def _start_name_change(self, user_id: int, message_id: int, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
        message_text = (
            "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        
        await self.edit_message_safely(
            user_id,
            message_id,
            message_text,
            create_back_button("account")
        )
        
        await state.set_state(AccountStates.waiting_for_name)
    
    async def _process_name_change(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏"""
        user_id = self.get_user_id(message)
        new_name = message.text.strip()
        
        try:
            if len(new_name) < 2:
                raise ValueError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            
            if len(new_name) > 50:
                raise ValueError("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–º—è
            success = self.db_service.update_user_name(user_id, new_name)
            
            if success:
                success_message = f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}"
            else:
                success_message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            await self.send_message_safely(
                user_id,
                success_message,
                create_back_button("account")
            )
            
        except ValueError as e:
            error_message = f"‚ö†Ô∏è {str(e)}"
            await self.send_message_safely(
                user_id,
                error_message,
                create_back_button("account")
            )
        except Exception as e:
            error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {str(e)}"
            await self.send_message_safely(
                user_id,
                error_message,
                create_back_button("account")
            )
        finally:
            await state.clear()
