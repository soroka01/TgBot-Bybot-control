"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
"""
import requests
import numpy as np
import matplotlib.pyplot as plt
import io
from typing import Optional, Tuple, Dict, Any
from datetime import datetime, timedelta

from core.base_service import APIService
from core.config import config
from core.factories import session_factory
from core.decorators import handle_errors, log_function_call, retry
from core.exceptions import APIError

class MarketService(APIService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.session = session_factory.get_session()
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ", (None, None))
    @retry(attempts=3, delay=2.0)
    def get_price_data(self, interval: str = "D") -> Tuple[Optional[float], Optional[float]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ (–æ—Ç–∫—Ä—ã—Ç–∏–µ, –∑–∞–∫—Ä—ã—Ç–∏–µ)"""
        try:
            response = self.session.get_kline(
                category="spot", 
                symbol=config.SYMBOL, 
                interval=interval, 
                limit=1
            )
            
            klines = response.get('result', {}).get('list', [])
            if not klines:
                raise APIError("–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            kline = klines[0]
            open_price, close_price = float(kline[1]), float(kline[4])
            return open_price, close_price
            
        except Exception as e:
            raise APIError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ: {e}") from e
    
    @handle_errors("–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    @log_function_call()
    def get_current_price(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        _, close_price = self.get_price_data()
        if close_price is None:
            raise APIError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
        return close_price
    
    @handle_errors("–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    def get_daily_change_percent(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        open_price, close_price = self.get_price_data()
        if open_price is None or close_price is None:
            raise APIError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        
        change_percent = ((close_price - open_price) / open_price) * 100
        return f"{round(change_percent, 2)}%"
    
    def get_price_or_change(self, data_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"""
        if data_type == 'price':
            return str(self.get_current_price())
        elif data_type == 'change':
            return self.get_daily_change_percent()
        else:
            raise ValueError("data_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'price' –∏–ª–∏ 'change'")
    
    @handle_errors("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è RSI")
    @retry(attempts=3)
    def calculate_rsi(self, timeframe: str, period: int = 14) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å RSI"""
        try:
            response = self.session.get_kline(
                category="spot", 
                symbol=config.SYMBOL, 
                interval=timeframe, 
                limit=100
            )
            
            klines = response.get('result', {}).get('list', [])
            if not klines:
                raise APIError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è RSI")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è –∏ —Ä–µ–≤–µ—Ä—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            close_prices = [float(kline[4]) for kline in reversed(klines)]
            close_prices = np.array(close_prices, dtype=float)
            
            if len(close_prices) < period + 1:
                raise APIError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {period + 1})")
            
            # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
            deltas = np.diff(close_prices)
            
            # –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            seed = deltas[:period]
            up = np.mean(seed[seed >= 0])
            down = -np.mean(seed[seed < 0])
            
            if down == 0:
                return 100.0
            
            rs = up / down
            rsi = np.zeros_like(close_prices)
            rsi[:period] = 100.0 - 100.0 / (1.0 + rs)
            
            # –†–∞—Å—á–µ—Ç RSI –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
            for i in range(period, len(close_prices)):
                delta = deltas[i - 1]
                
                if delta > 0:
                    upval, downval = delta, 0.0
                else:
                    upval, downval = 0.0, -delta
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
                up = (up * (period - 1) + upval) / period
                down = (down * (period - 1) + downval) / period
                
                if down == 0:
                    rsi[i] = 100.0
                else:
                    rs = up / down
                    rsi[i] = 100.0 - 100.0 / (1.0 + rs)
            
            return round(rsi[-1], 2)
            
        except Exception as e:
            raise APIError(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è RSI: {e}") from e
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂")
    @retry(attempts=3)
    def get_buy_sell_ratio(self, timeframe: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂"""
        period_map = {
            "60": "1h",
            "D": "1d",
            "1": "5min"
        }
        
        period = period_map.get(str(timeframe), "1h")
        url = (f"https://api.bybit.com/v5/market/account-ratio"
               f"?category=linear&symbol={config.SYMBOL}&period={period}&limit=1")
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            if not data.get('result', {}).get('list'):
                raise APIError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂")
            
            ratio_data = data['result']['list'][0]
            buy_ratio = ratio_data.get('buyRatio', 'N/A')
            sell_ratio = ratio_data.get('sellRatio', 'N/A')
            
            return f"üü¢ {buy_ratio}  {sell_ratio} üî¥"
            
        except requests.RequestException as e:
            raise APIError(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è: {e}") from e
    
    @handle_errors("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞", (None, None))
    @log_function_call()
    def create_price_chart(self, weeks: int = 5) -> Tuple[Optional[io.BytesIO], Optional[float]]:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å"""
        try:
            limit = weeks * 7
            response = self.session.get_kline(
                category="spot", 
                symbol=config.SYMBOL, 
                interval='D', 
                limit=limit
            )
            
            klines = response.get('result', {}).get('list', [])
            if not klines:
                raise APIError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º—É–º–∞
            recent_klines = sorted(klines[:14], key=lambda x: float(x[3]))  # x[3] - low price
            min_price_14d = float(recent_klines[0][3])
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(12, 6))
            plt.style.use('dark_background')
            
            width = 0.4
            width2 = 0.05
            green_color = '#00ff88'
            red_color = '#ff4444'
            
            for i, kline in enumerate(klines):
                timestamp, open_p, high_p, low_p, close_p = kline[0], float(kline[1]), float(kline[2]), float(kline[3]), float(kline[4])
                
                color = green_color if close_p > open_p else red_color
                
                # –û—Å–Ω–æ–≤–Ω–∞—è —Å–≤–µ—á–∞
                plt.bar(i, close_p - open_p, width, bottom=open_p, color=color, alpha=0.8)
                # –¢–µ–Ω—å —Å–≤–µ—Ä—Ö—É
                plt.bar(i, high_p - close_p, width2, bottom=close_p, color=color)
                # –¢–µ–Ω—å —Å–Ω–∏–∑—É  
                plt.bar(i, low_p - open_p, width2, bottom=open_p, color=color)
            
            # –õ–∏–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞ –∑–∞ 14 –¥–Ω–µ–π
            plt.axhline(y=min_price_14d, color='purple', linestyle='--', alpha=0.7, label=f'Min 14d: {min_price_14d:.2f}')
            
            plt.title(f'{config.SYMBOL} - {weeks} –Ω–µ–¥–µ–ª—å', color='white', fontsize=14)
            plt.ylabel('–¶–µ–Ω–∞ (USDT)', color='white')
            plt.xticks([])  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –ø–æ X
            plt.legend()
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            return buf, min_price_14d
            
        except Exception as e:
            plt.close()  # –û—á–∏—Å—Ç–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            raise APIError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}") from e
    
    def call_api(self, method: str, **kwargs) -> Any:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ API"""
        try:
            api_method = getattr(self.session, method)
            return api_method(**kwargs)
        except AttributeError:
            raise APIError(f"–ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            raise APIError(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API {method}: {e}") from e

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
market_service = MarketService()
