"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""
from typing import Tuple, Dict, Any, List

from core.base_service import APIService
from core.config import config
from core.factories import session_factory
from core.decorators import handle_errors, log_function_call, retry
from core.exceptions import APIError

class TradingService(APIService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        super().__init__()
        self.session = session_factory.get_session()
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞")
    @retry(attempts=2)
    @log_function_call()
    def place_market_buy_order(self, amount_usdt: float) -> Dict[str, Any]:
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        try:
            order = self.session.place_active_order(
                category="spot",
                symbol=config.SYMBOL,
                side="Buy",
                orderType="Market",
                qty=str(amount_usdt),
                marketUnit="quoteCoin"
            )
            
            if order.get('retCode') != 0:
                raise APIError(f"–û—à–∏–±–∫–∞ API: {order.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            return order.get('result', {})
            
        except Exception as e:
            raise APIError(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}") from e
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤", [])
    @retry(attempts=3)
    def get_trade_history(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        try:
            response = self.session.get_order_history(
                category="spot", 
                symbol=config.SYMBOL, 
                limit=limit
            )
            
            if response.get('retCode') != 0:
                raise APIError(f"–û—à–∏–±–∫–∞ API: {response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            orders = response.get('result', {}).get('list', [])
            return orders
            
        except Exception as e:
            raise APIError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}") from e
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", ("N/A", "N/A"))
    @retry(attempts=3)
    def get_balance(self) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å BTC –∏ USDT"""
        try:
            response = self.session.get_wallet_balance(
                accountType="UNIFIED",
                coin="BTC,USDT"
            )
            
            if response.get('retCode') != 0:
                raise APIError(f"–û—à–∏–±–∫–∞ API: {response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            balance_list = response.get('result', {}).get('list', [])
            if not balance_list:
                raise APIError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ")
            
            coins = balance_list[0].get('coin', [])
            
            btc_balance = "N/A"
            usdt_balance = "N/A"
            
            for coin in coins:
                if coin.get('coin') == 'BTC':
                    btc_balance = coin.get('walletBalance', 'N/A')
                elif coin.get('coin') == 'USDT':
                    usdt_balance = coin.get('walletBalance', 'N/A')
            
            return btc_balance, usdt_balance
            
        except Exception as e:
            raise APIError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}") from e
    
    def format_trade_history(self, history: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not history:
            return "–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞"
        
        formatted_lines = []
        for order in history:
            order_id = order.get('orderId', 'N/A')
            qty = order.get('qty', 'N/A')
            price = order.get('price', 'N/A')
            status = order.get('orderStatus', 'N/A')
            side = order.get('side', 'N/A')
            
            formatted_lines.append(
                f"üìã ID: {order_id}\n"
                f"üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}\n"
                f"üí≤ –¶–µ–Ω–∞: {price}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üîÑ –¢–∏–ø: {side}\n"
                f"{'‚îÄ' * 20}"
            )
        
        return "\n".join(formatted_lines)
    
    def call_api(self, method: str, **kwargs) -> Any:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API"""
        try:
            api_method = getattr(self.session, method)
            return api_method(**kwargs)
        except AttributeError:
            raise APIError(f"–¢–æ—Ä–≥–æ–≤—ã–π –º–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            raise APIError(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ API {method}: {e}") from e

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
trading_service = TradingService()
