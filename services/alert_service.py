"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–ª–µ—Ä—Ç–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""
from typing import List, Dict, Any, Optional
from datetime import datetime

from core.base_service import BaseService
from core.config import config
from core.decorators import handle_errors, log_function_call
from core.exceptions import ValidationError
from services.database_service import db_service
from services.market_service import market_service

class AlertService(BaseService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–ª–µ—Ä—Ç–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.db_service = db_service
        self.market_service = market_service
    
    @handle_errors("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–∞", False)
    def _validate_price_alert(self, price: float) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        if price <= 0:
            raise ValidationError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã (–Ω–µ –±–æ–ª–µ–µ —á–µ–º –≤ 10 —Ä–∞–∑ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π)
        try:
            current_price = self.market_service.get_current_price()
            if price > current_price * 10 or price < current_price / 10:
                raise ValidationError("–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π")
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            pass
        
        return True
    
    @handle_errors("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ RSI –∞–ª–µ—Ä—Ç–∞", False)
    def _validate_rsi_alert(self, rsi_level: float) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è RSI –∞–ª–µ—Ä—Ç–∞"""
        if not (0 <= rsi_level <= 100):
            raise ValidationError("RSI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100")
        return True
    
    @handle_errors("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞", False)
    @log_function_call()
    def add_price_alert(self, user_id: int, price: float, permanent: bool = False) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–Ω–æ–≤–æ–π –∞–ª–µ—Ä—Ç"""
        self._validate_price_alert(price)
        
        alert = {
            "price": price,
            "permanent": permanent,
            "created_at": datetime.now().isoformat(),
            "triggered": False
        }
        
        return self.db_service.add_user_alert(user_id, alert, "price_alerts")
    
    @handle_errors("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RSI –∞–ª–µ—Ä—Ç–∞", False)
    @log_function_call()
    def add_rsi_alert(self, user_id: int, rsi_level: float, condition: str, permanent: bool = False) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å RSI –∞–ª–µ—Ä—Ç"""
        self._validate_rsi_alert(rsi_level)
        
        if condition not in ["above", "below"]:
            raise ValidationError("–£—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'above' –∏–ª–∏ 'below'")
        
        alert = {
            "level": rsi_level,
            "condition": condition,
            "permanent": permanent,
            "created_at": datetime.now().isoformat(),
            "triggered": False
        }
        
        return self.db_service.add_user_alert(user_id, alert, "rsi_alerts")
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤", [])
    def get_price_alerts(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.db_service.get_user_alerts(user_id, "price_alerts")
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RSI –∞–ª–µ—Ä—Ç–æ–≤", [])
    def get_rsi_alerts(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å RSI –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.db_service.get_user_alerts(user_id, "rsi_alerts")
    
    @handle_errors("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞", False)
    def remove_alert(self, user_id: int, alert_index: int, alert_type: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if alert_type not in ["price_alerts", "rsi_alerts"]:
            raise ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞")
        
        return self.db_service.remove_user_alert(user_id, alert_index, alert_type)
    
    @handle_errors("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤", False)
    def clear_alerts(self, user_id: int, alert_type: str = None) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if alert_type:
            return self.db_service.clear_user_alerts(user_id, alert_type)
        else:
            # –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤
            price_cleared = self.db_service.clear_user_alerts(user_id, "price_alerts")
            rsi_cleared = self.db_service.clear_user_alerts(user_id, "rsi_alerts")
            return price_cleared and rsi_cleared
    
    def format_price_alerts(self, alerts: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not alerts:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"
        
        formatted_lines = []
        for i, alert in enumerate(alerts, 1):
            price = alert.get('price', 'N/A')
            permanent = "–ù–∞–≤—Å–µ–≥–¥–∞" if alert.get('permanent', False) else "–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ"
            created = alert.get('created_at', 'N/A')
            
            formatted_lines.append(f"{i}. üí≤ {price} USDT - {permanent}")
        
        return "üìã –í–∞—à–∏ —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:\n" + "\n".join(formatted_lines)
    
    def format_rsi_alerts(self, alerts: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å RSI –∞–ª–µ—Ä—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not alerts:
            return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö RSI –∞–ª–µ—Ä—Ç–æ–≤"
        
        formatted_lines = []
        for i, alert in enumerate(alerts, 1):
            level = alert.get('level', 'N/A')
            condition = ">" if alert.get('condition') == 'above' else "<"
            permanent = "–ù–∞–≤—Å–µ–≥–¥–∞" if alert.get('permanent', False) else "–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ"
            
            formatted_lines.append(f"{i}. üìä RSI {condition} {level} - {permanent}")
        
        return "üìã –í–∞—à–∏ RSI –∞–ª–µ—Ä—Ç—ã:\n" + "\n".join(formatted_lines)
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤")
    @log_function_call()
    def check_price_alerts(self) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        triggered_alerts = []
        
        try:
            current_price = self.market_service.get_current_price()
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return triggered_alerts
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = self.db_service.get_all_users()
        
        for user_id in all_users:
            try:
                alerts = self.get_price_alerts(user_id)
                user_triggered = []
                
                for i, alert in enumerate(alerts):
                    alert_price = alert.get('price', 0)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏ –∞–ª–µ—Ä—Ç
                    if current_price >= alert_price and not alert.get('triggered', False):
                        alert['triggered'] = True
                        user_triggered.append({
                            'user_id': user_id,
                            'alert': alert,
                            'current_price': current_price,
                            'index': i
                        })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_triggered:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–µ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –∞–ª–µ—Ä—Ç—ã
                    remaining_alerts = []
                    for alert in alerts:
                        if alert.get('triggered', False) and not alert.get('permanent', False):
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–µ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –∞–ª–µ—Ä—Ç—ã
                        remaining_alerts.append(alert)
                    
                    self.db_service.save_user_alerts(user_id, remaining_alerts, "price_alerts")
                    triggered_alerts.extend(user_triggered)
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        return triggered_alerts
    
    @handle_errors("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RSI –∞–ª–µ—Ä—Ç–æ–≤")
    @log_function_call()
    def check_rsi_alerts(self, timeframe: str = "1") -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å RSI –∞–ª–µ—Ä—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        triggered_alerts = []
        
        try:
            current_rsi = self.market_service.calculate_rsi(timeframe)
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å RSI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return triggered_alerts
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = self.db_service.get_all_users()
        
        for user_id in all_users:
            try:
                alerts = self.get_rsi_alerts(user_id)
                user_triggered = []
                
                for i, alert in enumerate(alerts):
                    level = alert.get('level', 0)
                    condition = alert.get('condition', 'below')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
                    triggered = False
                    if condition == 'below' and current_rsi < level:
                        triggered = True
                    elif condition == 'above' and current_rsi > level:
                        triggered = True
                    
                    if triggered and not alert.get('triggered', False):
                        alert['triggered'] = True
                        user_triggered.append({
                            'user_id': user_id,
                            'alert': alert,
                            'current_rsi': current_rsi,
                            'index': i
                        })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_triggered:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–µ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –∞–ª–µ—Ä—Ç—ã
                    remaining_alerts = []
                    for alert in alerts:
                        if alert.get('triggered', False) and not alert.get('permanent', False):
                            continue
                        remaining_alerts.append(alert)
                    
                    self.db_service.save_user_alerts(user_id, remaining_alerts, "rsi_alerts")
                    triggered_alerts.extend(user_triggered)
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RSI –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        return triggered_alerts

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
alert_service = AlertService()
