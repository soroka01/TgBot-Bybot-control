"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
"""
import requests
from typing import Dict, Any, List

from core.base_service import APIService
from core.decorators import handle_errors, log_function_call, retry
from core.exceptions import APIError

class NewsService(APIService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
    
    def __init__(self):
        super().__init__()
        self.base_url = "https://api.coingecko.com/api/v3"
        self.timeout = 10
    
    @handle_errors("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    @retry(attempts=3, delay=2.0)
    @log_function_call()
    def get_latest_crypto_news(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
        try:
            # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CoinGecko API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
            url = f"{self.base_url}/search/trending"
            
            response = requests.get(url, timeout=self.timeout)
            response.raise_for_status()
            
            data = response.json()
            trending_coins = data.get('coins', [])
            
            if not trending_coins:
                return "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"
            
            news_lines = ["üì∞ –¢–æ–ø —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:"]
            
            for i, coin in enumerate(trending_coins[:5], 1):
                coin_data = coin.get('item', {})
                name = coin_data.get('name', 'N/A')
                symbol = coin_data.get('symbol', 'N/A')
                market_cap_rank = coin_data.get('market_cap_rank', 'N/A')
                
                news_lines.append(
                    f"{i}. ü™ô {name} ({symbol.upper()}) - –†–∞–Ω–≥: {market_cap_rank}"
                )
            
            return "\n".join(news_lines)
            
        except requests.RequestException as e:
            raise APIError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}") from e
        except Exception as e:
            raise APIError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}") from e
    
    @handle_errors("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    @retry(attempts=3)
    def get_market_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ä—ã–Ω–∫—É"""
        try:
            url = f"{self.base_url}/global"
            
            response = requests.get(url, timeout=self.timeout)
            response.raise_for_status()
            
            data = response.json()
            global_data = data.get('data', {})
            
            total_market_cap = global_data.get('total_market_cap', {}).get('usd', 0)
            total_volume = global_data.get('total_volume', {}).get('usd', 0)
            btc_dominance = global_data.get('market_cap_percentage', {}).get('btc', 0)
            
            summary = (
                f"üåç –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${total_market_cap:,.0f}\n"
                f"üìä –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ 24—á: ${total_volume:,.0f}\n"
                f"‚Çø –î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {btc_dominance:.1f}%"
            )
            
            return summary
            
        except requests.RequestException as e:
            raise APIError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞: {e}") from e
    
    def call_api(self, method: str, **kwargs) -> Any:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ API"""
        try:
            url = f"{self.base_url}/{method}"
            response = requests.get(url, timeout=self.timeout, **kwargs)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            raise APIError(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API {method}: {e}") from e

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
news_service = NewsService()
