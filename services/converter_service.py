"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
"""
from typing import Union

from core.base_service import BaseService
from core.decorators import handle_errors, log_function_call
from core.exceptions import ValidationError
from services.market_service import market_service

class ConverterService(BaseService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç"""
    
    def __init__(self):
        super().__init__()
        self.market_service = market_service
    
    @handle_errors("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã", False)
    def _validate_amount(self, amount: float) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        if amount <= 0:
            raise ValidationError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        if amount > 1e12:  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
            raise ValidationError("–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è")
        
        return True
    
    @handle_errors("–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    @log_function_call()
    def convert_usd_to_btc(self, usd_amount: float) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å USD –≤ BTC"""
        self._validate_amount(usd_amount)
        
        current_price = self.market_service.get_current_price()
        btc_amount = usd_amount / current_price
        
        return round(btc_amount, 8)  # BTC –æ–±—ã—á–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 8 –∑–Ω–∞–∫–æ–≤
    
    @handle_errors("–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    @log_function_call()
    def convert_btc_to_usd(self, btc_amount: float) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å BTC –≤ USD"""
        self._validate_amount(btc_amount)
        
        current_price = self.market_service.get_current_price()
        usd_amount = btc_amount * current_price
        
        return round(usd_amount, 2)  # USD –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    
    @handle_errors("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")
    def convert(self, amount: float, from_currency: str, to_currency: str) -> Union[float, str]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        from_currency = from_currency.upper()
        to_currency = to_currency.upper()
        
        conversion_map = {
            ("USD", "BTC"): self.convert_usd_to_btc,
            ("BTC", "USD"): self.convert_btc_to_usd,
        }
        
        converter = conversion_map.get((from_currency, to_currency))
        if not converter:
            available_pairs = ", ".join([f"{f}->{t}" for f, t in conversion_map.keys()])
            raise ValidationError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–∞—Ä–∞ –≤–∞–ª—é—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_pairs}")
        
        return converter(amount)
    
    def format_conversion_result(self, amount: float, from_currency: str, 
                               to_currency: str, result: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        from_currency = from_currency.upper()
        to_currency = to_currency.upper()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if to_currency == "BTC":
            precision = 8
        else:
            precision = 2
        
        return (
            f"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:\n"
            f"üì• {amount} {from_currency}\n"
            f"üì§ {result:.{precision}f} {to_currency}\n"
            f"üí≤ –ü–æ –∫—É—Ä—Å—É: {self.market_service.get_current_price():.2f} USD/BTC"
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
converter_service = ConverterService()
