"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""
import asyncio
import signal
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

from core.logging_config import logger
from core.config import config
from services.database_service import db_service
from handlers.handler_manager import handler_manager
from tasks.task_service import task_service

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
    
    def __init__(self):
        self.logger = logger
        self.db_service = db_service
        self.handler_manager = handler_manager
        self.task_service = task_service
        self.bot = None
        self.dp = None
        self._running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        asyncio.create_task(self.stop())
        sys.exit(0)
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            self.logger.info("=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot ===")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ DatabaseService
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
            self.handler_manager.register_all_handlers()
            self.bot = self.handler_manager.get_bot()
            self.dp = self.handler_manager.get_dispatcher()
            
            if not self.bot:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
            self.task_service.setup_tasks()
            
            self.logger.info("=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not await self.initialize():
            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç")
            return False
        
        try:
            self.logger.info("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===")
            
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
            self.logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
            self.task_service.start_scheduler()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            self.logger.info(f"–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (—Ç–æ–∫–µ–Ω: {config.TG_TOKEN[:10]}...)")
            self.logger.info(f"–û–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {config.TG_IDS}")
            
            self._running = True
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            await self._send_startup_notification()
            
            # –ó–∞–ø—É—Å–∫ polling
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            await self.stop()
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not self._running:
            return
        
        self.logger.info("=== –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ ===")
        self._running = False
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
            self.task_service.stop_scheduler()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            await self._send_shutdown_notification()
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
            if self.bot:
                self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
                await self.bot.session.close()
            
            self.logger.info("=== –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ===")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    async def _send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            message = (
                f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n"
                f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üîß –í–µ—Ä—Å–∏—è: 2.0 (Refactored)\n"
                f"üìä –°–∏–º–≤–æ–ª: {config.SYMBOL}\n"
                f"‚öôÔ∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: {config.DEFAULT_TIMEFRAME}–º–∏–Ω"
            )
            
            for admin_id in config.TG_IDS[:1]:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–º—É –∞–¥–º–∏–Ω—É
                try:
                    await self.bot.send_message(admin_id, message)
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {admin_id}: {e}")
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    async def _send_shutdown_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        try:
            message = (
                f"üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
                f"‚è∞ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            for admin_id in config.TG_IDS[:1]:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–º—É –∞–¥–º–∏–Ω—É
                try:
                    await self.bot.send_message(admin_id, message)
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {admin_id}: {e}")
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    def get_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        return {
            "running": self._running,
            "bot_initialized": self.bot is not None,
            "scheduler_running": self.task_service._running if hasattr(self.task_service, '_running') else False,
            "config": {
                "symbol": config.SYMBOL,
                "timeframe": config.DEFAULT_TIMEFRAME,
                "users_count": len(config.TG_IDS),
                "max_alerts": config.MAX_ALERTS_PER_USER
            }
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot_app = TelegramBot()
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("=== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===")
        logger.info(f"–°–∏–º–≤–æ–ª: {config.SYMBOL}")
        logger.info(f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {config.DEFAULT_TIMEFRAME}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {config.TG_IDS}")
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DB_PATH}")
        logger.info(f"–ú–∞–∫—Å–∏–º—É–º –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {config.MAX_ALERTS_PER_USER}")
        
        # –ó–∞–ø—É—Å–∫
        success = await bot_app.start()
        
        if not success:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            return 1
            
        return 0
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        return 0
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == '__main__':
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
